/*
 * Author: Simon Lehner-Dittenberger <simon.lehnerd@gmail.com>
 */

#include <bits/stdc++.h>

using namespace std;

#ifdef DEBUG
#define debug(args...)            {dbg,args; cerr<<endl;}
#define D(args...)                printf(args)
#else
#define debug(args...)            // Just strip off all debug tokens
#define D(args...)
#endif

struct debugger {

    template<typename T> debugger& operator,(const T& v) {
        cerr << v << " ";
        return *this;
    }
} dbg;

#define FORIT(i,obj)    for(auto i = (obj).begin(); i != (obj).end(); ++i)
#define FORITD(i,obj)   for(auto i = (obj).rbegin(); i != (obj).rend(); ++i)
#define FOR(i,a,b)      for(int (i) = (a); (i) < (b); (i)++)
#define FORN(i,a,b)     for(int (i) = (a); (i) <= (b); (i)++)
#define FORD(i,a,b)     for(int (i) = (a); (i) >= (b); (i)--)
#define REP(i,n)        FOR(i,0,n)
#define REPN(i,n)       FORN(i,1,n)
#define REPD(i,n)       FORD(i,n,1)

#define ALL(c)          (c).begin(), (c).end()  
#define SIZE(c)         ((int)(c).size())
#define LEN(c)          ((int)(c).length())

#define all(c) ALL(c)

#define fi              first
#define se              second
#define sz(x)           ((int)((x).size()))
#define pb              push_back 
#define mp              make_pair 

#define contains(data,value) (find(all(data),value) != data.end())

string doit(vector<string> requirements, vector<pair<string,pair<double,vector<string> > > >proposals) {
	
	int bestCount = -1;
	double bestPrice = -1;
	string name;
	
	for(auto &p : proposals) {
		int cnt = 0;
		for(auto has : p.second.second) {
			if(contains(requirements,has)) {
				cnt++;			
			}
		}
		
		debug(p.first,p.second.first,cnt);
		
		if(cnt > bestCount) {
			name = p.first;
			bestCount = cnt;
			bestPrice = p.second.first;
		}
		if(cnt == bestCount && p.second.first < bestPrice) {
			name = p.first;
			bestCount = cnt;
			bestPrice = p.second.first;
		}
		
		
	}
	return name;
}

int main() {
	for(int rfp = 1;true;rfp++) {
		int N,P;
		cin>>N>>P;
		if(N == 0)
			break;
		cin.ignore();
		if(rfp != 1) cout << endl;
		
		vector<string> requirements;
		REP(n,N) {
			string str;
			getline(cin, str);
			requirements.push_back(str);
		}
		vector<pair<string,pair<double,vector<string> > > > proposals;
		REP(p,P) {
			string name;
			double price;
			int cnt;
			vector<string> mets;
			getline(cin, name);
			cin >> price;
			cin >> cnt;
			cin.ignore();
			REP(c,cnt) {
				string str;
				getline(cin, str);
				mets.pb(str);
			}
			proposals.pb(mp(name,mp(price,mets)));
		}
		
		cout << "RFP #" << rfp << endl;
		cout << doit(requirements,proposals) << endl;
	}
	return 0;
}










































